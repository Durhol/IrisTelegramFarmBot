import time
import asyncio
import logging
import re
import sys
import os
from telethon import TelegramClient, events, utils
from datetime import datetime, timedelta
from telethon.errors import FloodWaitError, SessionPasswordNeededError
from telethon.tl.types import PeerChat, PeerChannel

if sys.platform == 'win32':
    os.system('chcp 65001')

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('iris_farm.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

API_ID = ''
API_HASH = ''
PHONE_NUMBER = ''
IRIS_BOT_USERNAME = 'iris_cm_bot'
GROUP_ID = -100
FARM_COMMAND = '–§–∞—Ä–º–∞'

SUCCESS_PATTERN = r'–ó–ê–ß–Å–¢'
FAILURE_PATTERN = r'–ù–ï–ó–ê–ß–Å–¢.*—á–µ—Ä–µ–∑\s+(\d+)\s+—á–∞—Å(?:–∞|–æ–≤)?\s+(\d+)\s+–º–∏–Ω'

class IrisFarmer:
    def __init__(self):
        self.client = None
        self.next_farm_time = datetime.now()
        self.retry_interval = timedelta(minutes=2)
        self.normal_interval = timedelta(hours=4)
        self.running = True
        self.iris_bot_id = None

    async def initialize(self):
        self.client = TelegramClient('iris_session', API_ID, API_HASH)
        
        try:
            await self.client.connect()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –¢–µ–ª–µ–≥—Ä–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            if not await self.client.is_user_authorized():
                logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                await self.client.send_code_request(PHONE_NUMBER)
                try:
                    code = input('–í–≤–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥: ')
                    await self.client.sign_in(PHONE_NUMBER, code)
                except SessionPasswordNeededError:
                    password = input('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ')
                    await self.client.sign_in(password=password)
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            else:
                logger.info("–£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            
            entity = await self.client.get_entity(IRIS_BOT_USERNAME)
            self.iris_bot_id = entity.id
            logger.info(f"ID –±–æ—Ç–∞ –ò—Ä–∏—Å: {self.iris_bot_id}")
            
            try:
                group_entity = await self.client.get_entity(GROUP_ID)
                logger.info(f"–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: {utils.get_display_name(group_entity)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ: {e}")
                logger.info("–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
                
                dialogs = await self.client.get_dialogs()
                logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:")
                for dialog in dialogs:
                    entity_type = "–ß–∞—Ç" if isinstance(dialog.entity, PeerChat) else "–ö–∞–Ω–∞–ª" if isinstance(dialog.entity, PeerChannel) else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    logger.info(f"ID: {dialog.entity.id}, –¢–∏–ø: {entity_type}, –ù–∞–∑–≤–∞–Ω–∏–µ: {dialog.name}")
                
                raise Exception("–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ. –ü—Ä–æ–≤–µ—Ä—å ID –≥—Ä—É–ø–ø—ã.")
            
            @self.client.on(events.NewMessage(from_users=self.iris_bot_id, chats=GROUP_ID))
            async def message_handler(event):
                await self.handle_response(event)
            
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª —Ñ–∞—Ä–º–∏–Ω–≥–∞")
            asyncio.create_task(self.farming_loop())
            logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —Ñ–∞—Ä–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {self.next_farm_time}")
            await self.client.run_until_disconnected()
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.restart()
    
    async def handle_response(self, event):
        message_text = event.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò—Ä–∏—Å: {message_text}")
        
        if match := re.search(FAILURE_PATTERN, message_text):
            hours = int(match.group(1))
            minutes = int(match.group(2))
            wait_time = timedelta(hours=hours, minutes=minutes)
            self.next_farm_time = datetime.now() + wait_time
            logger.info(f"‚ùå –§–∞—Ä–º –Ω–µ —É–¥–∞–ª—Å—è. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω ({self.next_farm_time})")
            return
        elif re.search(SUCCESS_PATTERN, message_text):
            logger.info("‚úÖ –§–∞—Ä–º —É—Å–ø–µ—à–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞")
            self.next_farm_time = datetime.now() + self.normal_interval
            logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —Ñ–∞—Ä–º –≤: {self.next_farm_time}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò—Ä–∏—Å. –¢–µ–∫—Å—Ç: {message_text}")
            self.next_farm_time = datetime.now() + self.retry_interval
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self.retry_interval.total_seconds() / 60} –º–∏–Ω ({self.next_farm_time})")
    
    async def send_farm_command(self):
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{FARM_COMMAND}' –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}")
            await self.client.send_message(GROUP_ID, FARM_COMMAND)
            logger.info("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except FloodWaitError as e:
            wait_seconds = e.seconds
            logger.warning(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏! –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds} —Å–µ–∫")
            self.next_farm_time = datetime.now() + timedelta(seconds=wait_seconds + 10)
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤: {self.next_farm_time}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            self.next_farm_time = datetime.now() + self.retry_interval
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self.retry_interval.total_seconds() / 60} –º–∏–Ω ({self.next_farm_time})")
    
    async def farming_loop(self):
        logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª —Ñ–∞—Ä–º–∏–Ω–≥–∞")
        while self.running:
            try:
                current_time = datetime.now()
                time_left = (self.next_farm_time - current_time).total_seconds()
                
                if time_left <= 0:
                    logger.info("–í—Ä–µ–º—è –¥–ª—è —Ñ–∞—Ä–º–∞!")
                    await self.send_farm_command()
                else:
                    if time_left % 600 < 30:
                        hours, remainder = divmod(time_left, 3600)
                        minutes, seconds = divmod(remainder, 60)
                        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: {int(hours)}—á {int(minutes)}–º {int(seconds)}—Å")
                
                await asyncio.sleep(10)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)
                self.restart()
    
    def restart(self):
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        time.sleep(5)
        python = sys.executable
        os.execl(python, python, *sys.argv)

async def main():
    farmer = IrisFarmer()
    await farmer.initialize()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        time.sleep(10)
        python = sys.executable
        os.execl(python, python, *sys.argv)